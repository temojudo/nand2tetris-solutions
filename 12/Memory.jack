// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int   freeList;

    /** Initializes the class. */
    function void init() {
        let ram      = 0;
        let freeList = 2048;

        let ram[freeList + 0] = 14335;
        let ram[freeList + 1] = 0;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int currList;
        var int resAddr;
        
        if (size < 1) {
            do Sys.error(5); // Allocated memory size must be positive
        }
        
        let currList = freeList;

        while (~(currList = 0)) {
            if (ram[currList] > size) {
                let ram[currList] = ram[currList] - size - 1;
                let resAddr       = currList + ram[currList];
                let ram[resAddr]  = size + 1;
                
                return resAddr + 1;
            }

            let currList = ram[currList + 1];
        }

        do Sys.error(6); // Heap overflow
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int currList;
        var int length;
        var int i;
        
        let currList = o - 1;
        let length   = o[-1];

        let i = 0;
        while (i < length) {
            let ram[currList + i] = 0;
            let i = i + 1;
        }

        let i = freeList;
        while(~(ram[i + 1] = 0)) {
            let i = ram[i + 1];
        }

        let ram[i + 1] = currList;
        return;
    }
}
