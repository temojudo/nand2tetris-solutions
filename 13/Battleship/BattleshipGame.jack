class BattleshipGame {
    field Board playerBoard;
    field Board computerBoard;
    field int direction;

    constructor BattleshipGame new() {
        let playerBoard   = Board.new(37,  28, 10, 10, 20);
        let computerBoard = Board.new(274, 28, 10, 10, 20);

        do playerBoard.setCursor(0, 0);

        return this;
    }

    method void dispose() {
        do playerBoard.dispose();
        do computerBoard.dispose();
        
        do Memory.deAlloc(this);
        return;
    }

    method void drawMessage(String message) {
        do Screen.setColor(false);

        do Screen.drawRectangle(0, 0, 511, 27);
        do Output.moveCursor(0, 0);
        do Output.printString(message);
        
        do Screen.setColor(true);

        do message.dispose();
        return;
    }

    method void moveCursor(Board board) {
        if (direction = 1) { do board.moveUp(); }
        if (direction = 2) { do board.moveDown(); }
        if (direction = 3) { do board.moveLeft(); }
        if (direction = 4) { do board.moveRight(); }

        do Sys.wait(4);  // delays the next movement
        return;
    }

    method int placePlayerShips() {
        var int key;  // the key currently pressed by the user
        var int seed;
        var boolean exit, validate;

        let exit = false;
        let seed = 0;
        
        while (~exit) {
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }
            
            let direction = -1;
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = 2; }   // down arrow
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow

            if (key = 128) { // enter key
                do playerBoard.placeShip();
            }

            if (key = 83) { // s key 
                let validate = playerBoard.validateBoard();
                if (validate) {
                    do drawMessage("Valid Board");
                    let exit = true;
                } else {
                    do drawMessage("Invalid Board");
                }
            }

            // waits for the key to be released
            while (~(key = 0)) {
                let seed = seed + key;
                let key  = Keyboard.keyPressed();
            }

            do moveCursor(playerBoard);
        }

        do playerBoard.removeCursor();
        return seed;
    }

    method void placeComputerShips() {
        do drawMessage("Computer started placing ships");
        do Sys.wait(4);

        do computerBoard.placeComputerShips();
        
        do drawMessage("Computer ended placing ships");
        do Sys.wait(4);

        return;
    }

    method boolean doPlayerMoves() {
        var boolean exit, sinked;
        var int key;
        
        do drawMessage("Player's turn");
        do computerBoard.setCursor(0, 0);

        let exit = false;
        while (~exit) {
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }
            
            let direction = -1;
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = 2; }   // down arrow
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow

            if (key = 128) { // enter key
                let sinked = computerBoard.markPlace();
                let exit = ((~sinked) | computerBoard.isAllShipsSinked());
            }

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
            }

            do moveCursor(computerBoard);
        }

        do computerBoard.removeCursor();
        return computerBoard.isAllShipsSinked();
    }

    method boolean doComputerMoves() {
        do drawMessage("Computer's turn");
        do Sys.wait(250);

        return playerBoard.sinkShipByComputer();
    }

    method void startBattle() {
        var boolean playerWins, computerWins;

        let playerWins   = false;
        let computerWins = false;

        while ((~playerWins) & (~computerWins)) {
            let playerWins = doPlayerMoves();
            if (~playerWins) {
                let computerWins = doComputerMoves();
            }
        }

        if (playerWins) {
            do drawMessage("Player Wins. Press space for new round or q for quit");
        } else {
            do drawMessage("Computer Wins. Press space for new round or q for quit");
        }

        return;
    }

    method void drawInitInstructions() {
        var String playerBoardTitle, computerBoardTitle;

        let playerBoardTitle   = "Player's Board";
        let computerBoardTitle = "Computer's Board";

        do drawMessage("Choose 7 ships with length 1,1,2,2,3,4,5. Use 'enter' for place/displace ship parts and 's' to start game!");

        do Output.moveCursor(21, 10);
        do Output.printString(playerBoardTitle);

        do Output.moveCursor(21, 39);
        do Output.printString(computerBoardTitle);

        do playerBoardTitle.dispose();
        do computerBoardTitle.dispose();

        return;
    }

    method void run() {
        var int seed;

        do drawInitInstructions();

        let seed = placePlayerShips();
        do Random.setSeed(seed);

        do placeComputerShips();
        do startBattle();
        
        return;
    }
}
