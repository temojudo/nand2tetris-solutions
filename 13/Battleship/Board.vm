function Board.new 4
push constant 16
call Memory.alloc 1
pop pointer 0
push pointer 0
push argument 0
push argument 1
push argument 2
push argument 3
push argument 4
call Board.initBoardParams 6
pop temp 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push argument 3
lt
not
if-goto WHILE_END1
push argument 0
push local 0
push argument 4
call Math.multiply 2
add
pop local 2
push argument 1
push local 1
push argument 4
call Math.multiply 2
add
pop local 3
push local 2
push local 3
push argument 4
push argument 4
call Board.drawCell 4
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Board.dispose 0
push argument 0
pop pointer 0
push pointer 0
push this 14
call Board.disposeGrid 2
pop temp 0
push pointer 0
push this 15
call Board.disposeGrid 2
pop temp 0
push constant 0
return
function Board.disposeGrid 2
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 2
lt
not
if-goto WHILE_END0
push local 1
push argument 1
add
pop pointer 1
push that 0
pop local 0
push local 0
call Array.dispose 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.initBoardParams 0
push argument 0
pop pointer 0
push argument 1
pop this 0
push argument 2
pop this 1
push argument 3
pop this 2
push argument 4
pop this 3
push argument 5
pop this 4
push constant 1
neg
pop this 5
push constant 1
neg
pop this 6
push constant 1
pop this 7
push constant 2
pop this 8
push this 4
push constant 2
push this 7
call Math.multiply 2
sub
pop this 9
push this 4
push constant 2
push this 8
call Math.multiply 2
sub
pop this 10
push constant 0
pop this 11
push constant 18
pop this 12
push constant 0
pop this 13
push this 2
call Array.new 1
pop this 14
push this 2
call Array.new 1
pop this 15
push pointer 0
push this 14
call Board.initGrid 2
pop temp 0
push pointer 0
push this 15
call Board.initGrid 2
pop temp 0
push constant 0
return
function Board.initGrid 3
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 2
lt
not
if-goto WHILE_END0
push this 3
call Array.new 1
pop local 0
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push this 3
lt
not
if-goto WHILE_END1
push local 2
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push argument 1
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.getShip 1
push argument 0
pop pointer 0
push argument 2
push constant 0
lt
push argument 2
push this 2
push constant 1
sub
gt
or
push argument 3
push constant 0
lt
or
push argument 3
push this 3
push constant 1
sub
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
return
label IF_FALSE0
push argument 2
push argument 1
add
pop pointer 1
push that 0
pop local 0
push argument 3
push local 0
add
pop pointer 1
push that 0
return
function Board.setShip 1
push argument 0
pop pointer 0
push argument 2
push argument 1
add
pop pointer 1
push that 0
pop local 0
push argument 3
push local 0
add
push argument 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Board.isAllShipsSinked 0
push argument 0
pop pointer 0
push this 12
push this 11
eq
return
function Board.hasNoNeighbour 0
push argument 0
pop pointer 0
push pointer 0
push argument 1
push constant 0
push argument 2
push constant 1
sub
call Math.max 2
push constant 0
push argument 3
push constant 1
sub
call Math.max 2
call Board.getShip 4
push constant 0
eq
push pointer 0
push argument 1
push constant 0
push argument 2
push constant 1
sub
call Math.max 2
push argument 3
call Board.getShip 4
push constant 0
eq
and
push pointer 0
push argument 1
push constant 0
push argument 2
push constant 1
sub
call Math.max 2
push this 2
push constant 1
sub
push argument 3
push constant 1
add
call Math.min 2
call Board.getShip 4
push constant 0
eq
and
push pointer 0
push argument 1
push argument 2
push constant 0
push argument 3
push constant 1
sub
call Math.max 2
call Board.getShip 4
push constant 0
eq
and
push pointer 0
push argument 1
push argument 2
push this 2
push constant 1
sub
push argument 3
push constant 1
add
call Math.min 2
call Board.getShip 4
push constant 0
eq
and
push pointer 0
push argument 1
push this 3
push constant 1
sub
push argument 2
push constant 1
add
call Math.min 2
push constant 0
push argument 3
push constant 1
sub
call Math.max 2
call Board.getShip 4
push constant 0
eq
and
push pointer 0
push argument 1
push this 3
push constant 1
sub
push argument 2
push constant 1
add
call Math.min 2
push argument 3
call Board.getShip 4
push constant 0
eq
and
push pointer 0
push argument 1
push this 3
push constant 1
sub
push argument 2
push constant 1
add
call Math.min 2
push this 2
push constant 1
sub
push argument 3
push constant 1
add
call Math.min 2
call Board.getShip 4
push constant 0
eq
and
return
function Board.drawCursor 2
push argument 0
pop pointer 0
push this 0
push this 5
push this 4
call Math.multiply 2
add
push this 7
add
pop local 0
push this 1
push this 6
push this 4
call Math.multiply 2
add
push this 7
add
pop local 1
push local 0
push local 1
push this 9
push this 9
call Board.drawCell 4
pop temp 0
push constant 0
return
function Board.removeCursor 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
call Board.drawCursor 1
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
return
function Board.setCursor 0
push argument 0
pop pointer 0
push this 5
push constant 1
neg
gt
push this 6
push constant 1
neg
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call Board.removeCursor 1
pop temp 0
label IF_FALSE0
push argument 1
pop this 5
push argument 2
pop this 6
push pointer 0
call Board.drawCursor 1
pop temp 0
push constant 0
return
function Board.setCursorCoordinates 0
push argument 0
pop pointer 0
push argument 1
pop this 5
push argument 2
pop this 6
push constant 0
return
function Board.moveUp 0
push argument 0
pop pointer 0
push this 6
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push this 5
push this 6
push constant 1
sub
call Board.setCursor 3
pop temp 0
label IF_FALSE0
push constant 0
return
function Board.moveDown 0
push argument 0
pop pointer 0
push this 6
push this 2
push constant 1
sub
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push this 5
push this 6
push constant 1
add
call Board.setCursor 3
pop temp 0
label IF_FALSE0
push constant 0
return
function Board.moveRight 0
push argument 0
pop pointer 0
push this 5
push this 3
push constant 1
sub
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push this 5
push constant 1
add
push this 6
call Board.setCursor 3
pop temp 0
label IF_FALSE0
push constant 0
return
function Board.moveLeft 0
push argument 0
pop pointer 0
push this 5
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push this 5
push constant 1
sub
push this 6
call Board.setCursor 3
pop temp 0
label IF_FALSE0
push constant 0
return
function Board.placeShip 6
push argument 0
pop pointer 0
push pointer 0
push this 14
push this 5
push this 6
call Board.getShip 4
pop local 4
push local 4
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 4
goto IF_END0
label IF_FALSE0
push constant 0
pop local 4
label IF_END0
push this 0
push this 5
push this 4
call Math.multiply 2
add
push this 8
add
pop local 0
push this 1
push this 6
push this 4
call Math.multiply 2
add
push this 8
add
pop local 1
push local 0
push this 10
add
pop local 2
push local 1
push this 10
add
pop local 3
push local 4
push constant 1
eq
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push local 2
push local 3
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
push this 14
push this 5
push this 6
push local 4
call Board.setShip 5
pop temp 0
push constant 0
return
function Board.findShipByLenHorizontal 4
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 3
lt
not
if-goto WHILE_END1
push pointer 0
push this 14
push local 0
push local 1
call Board.getShip 4
pop local 2
push local 2
push constant 0
gt
push pointer 0
push argument 1
push local 0
push local 1
call Board.getShip 4
push constant 0
eq
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
push constant 1
add
pop local 3
goto IF_END0
label IF_FALSE0
push local 3
push argument 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
label WHILE_EXP2
push argument 2
push constant 0
gt
not
if-goto WHILE_END2
push local 1
push constant 1
sub
pop local 1
push argument 2
push constant 1
sub
pop argument 2
push pointer 0
push argument 1
push local 0
push local 1
push constant 1
call Board.setShip 5
pop temp 0
goto WHILE_EXP2
label WHILE_END2
push constant 0
not
return
label IF_FALSE1
push constant 0
pop local 3
label IF_END0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 3
push argument 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
label WHILE_EXP3
push argument 2
push constant 0
gt
not
if-goto WHILE_END3
push local 1
push constant 1
sub
pop local 1
push argument 2
push constant 1
sub
pop argument 2
push pointer 0
push argument 1
push local 0
push local 1
push constant 1
call Board.setShip 5
pop temp 0
goto WHILE_EXP3
label WHILE_END3
push constant 0
not
return
label IF_FALSE2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.findShipByLenVertical 4
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 3
lt
not
if-goto WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 2
lt
not
if-goto WHILE_END1
push pointer 0
push this 14
push local 0
push local 1
call Board.getShip 4
pop local 2
push local 2
push constant 0
gt
push pointer 0
push argument 1
push local 0
push local 1
call Board.getShip 4
push constant 0
eq
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
push constant 1
add
pop local 3
goto IF_END0
label IF_FALSE0
push local 3
push argument 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
label WHILE_EXP2
push argument 2
push constant 0
gt
not
if-goto WHILE_END2
push local 0
push constant 1
sub
pop local 0
push argument 2
push constant 1
sub
pop argument 2
push pointer 0
push argument 1
push local 0
push local 1
push constant 1
call Board.setShip 5
pop temp 0
goto WHILE_EXP2
label WHILE_END2
push constant 0
not
return
label IF_FALSE1
push constant 0
pop local 3
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push local 3
push argument 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
label WHILE_EXP3
push argument 2
push constant 0
gt
not
if-goto WHILE_END3
push local 0
push constant 1
sub
pop local 0
push argument 2
push constant 1
sub
pop argument 2
push pointer 0
push argument 1
push local 0
push local 1
push constant 1
call Board.setShip 5
pop temp 0
goto WHILE_EXP3
label WHILE_END3
push constant 0
not
return
label IF_FALSE2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.findShipByLen 0
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call Board.findShipByLenHorizontal 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push pointer 0
push argument 1
push argument 2
call Board.findShipByLenVertical 3
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
label IF_FALSE1
push constant 0
return
function Board.getNumShips 3
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push this 3
lt
not
if-goto WHILE_END1
push pointer 0
push argument 1
push local 1
push local 2
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
label IF_FALSE0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Board.haveCommonCorner 0
push argument 0
pop pointer 0
push argument 3
push constant 0
lt
push argument 3
push this 3
push constant 1
sub
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 4
push constant 0
lt
push argument 4
push this 2
push constant 1
sub
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push pointer 0
push this 14
push argument 1
push argument 2
call Board.getShip 4
push constant 1
eq
push pointer 0
push this 14
push argument 3
push argument 4
call Board.getShip 4
push constant 1
eq
and
return
function Board.containsCommonCorner 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 3
lt
not
if-goto WHILE_END1
push pointer 0
push local 0
push local 1
push local 0
push constant 1
sub
push local 1
push constant 1
sub
call Board.haveCommonCorner 5
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push pointer 0
push local 0
push local 1
push local 0
push constant 1
sub
push local 1
push constant 1
add
call Board.haveCommonCorner 5
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
label IF_FALSE1
push pointer 0
push local 0
push local 1
push local 0
push constant 1
add
push local 1
push constant 1
sub
call Board.haveCommonCorner 5
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
return
label IF_FALSE2
push pointer 0
push local 0
push local 1
push local 0
push constant 1
add
push local 1
push constant 1
add
call Board.haveCommonCorner 5
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
not
return
label IF_FALSE3
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.checkBoard 1
push argument 0
pop pointer 0
push pointer 0
push this 14
call Board.getNumShips 2
push this 12
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push pointer 0
call Board.containsCommonCorner 1
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push pointer 0
push argument 1
push constant 5
call Board.findShipByLen 3
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
push pointer 0
push argument 1
push constant 4
call Board.findShipByLen 3
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
return
label IF_FALSE3
push pointer 0
push argument 1
push constant 3
call Board.findShipByLen 3
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
return
label IF_FALSE4
push pointer 0
push argument 1
push constant 2
call Board.findShipByLen 3
not
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
return
label IF_FALSE5
push pointer 0
push argument 1
push constant 2
call Board.findShipByLen 3
not
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
return
label IF_FALSE6
push pointer 0
push argument 1
push constant 1
call Board.findShipByLen 3
not
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
return
label IF_FALSE7
push pointer 0
push argument 1
push constant 1
call Board.findShipByLen 3
not
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 0
return
label IF_FALSE8
push constant 0
not
return
function Board.validateBoard 2
push argument 0
pop pointer 0
push this 2
call Array.new 1
pop local 1
push pointer 0
push local 1
call Board.initGrid 2
pop temp 0
push pointer 0
push local 1
call Board.checkBoard 2
pop local 0
push pointer 0
push local 1
call Board.disposeGrid 2
pop temp 0
push local 0
return
function Board.getEmptySpaceUp 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push argument 2
push constant 1
neg
gt
not
if-goto WHILE_END0
push pointer 0
push this 14
push argument 1
push argument 2
call Board.getShip 4
push pointer 0
push this 14
push argument 1
push argument 2
call Board.hasNoNeighbour 4
not
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
push argument 2
push constant 1
sub
pop argument 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Board.getEmptySpaceDown 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push argument 2
push this 2
lt
not
if-goto WHILE_END0
push pointer 0
push this 14
push argument 1
push argument 2
call Board.getShip 4
push pointer 0
push this 14
push argument 1
push argument 2
call Board.hasNoNeighbour 4
not
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
push argument 2
push constant 1
add
pop argument 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Board.getEmptySpaceLeft 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push argument 1
push constant 1
neg
gt
not
if-goto WHILE_END0
push pointer 0
push this 14
push argument 1
push argument 2
call Board.getShip 4
push pointer 0
push this 14
push argument 1
push argument 2
call Board.hasNoNeighbour 4
not
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Board.getEmptySpaceRight 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push argument 1
push this 3
lt
not
if-goto WHILE_END0
push pointer 0
push this 14
push argument 1
push argument 2
call Board.getShip 4
push pointer 0
push this 14
push argument 1
push argument 2
call Board.hasNoNeighbour 4
not
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Board.placeComputerShipWithLenHorizontal 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 3
lt
push argument 4
push constant 0
gt
and
not
if-goto WHILE_END0
push pointer 0
push argument 1
push local 0
add
push constant 1
add
push argument 2
call Board.setCursorCoordinates 3
pop temp 0
push pointer 0
push this 14
push this 5
push this 6
push constant 1
call Board.setShip 5
pop temp 0
push argument 4
push constant 1
sub
pop argument 4
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push argument 4
push constant 0
gt
not
if-goto WHILE_END1
push pointer 0
push argument 1
push local 0
sub
push argument 2
call Board.setCursorCoordinates 3
pop temp 0
push pointer 0
push this 14
push this 5
push this 6
push constant 1
call Board.setShip 5
pop temp 0
push argument 4
push constant 1
sub
pop argument 4
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function Board.placeComputerShipWithLenVertical 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 3
lt
push argument 4
push constant 0
gt
and
not
if-goto WHILE_END0
push pointer 0
push argument 1
push argument 2
push local 0
add
push constant 1
add
call Board.setCursorCoordinates 3
pop temp 0
push pointer 0
push this 14
push this 5
push this 6
push constant 1
call Board.setShip 5
pop temp 0
push argument 4
push constant 1
sub
pop argument 4
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push argument 4
push constant 0
gt
not
if-goto WHILE_END1
push pointer 0
push argument 1
push argument 2
push local 0
sub
call Board.setCursorCoordinates 3
pop temp 0
push pointer 0
push this 14
push this 5
push this 6
push constant 1
call Board.setShip 5
pop temp 0
push argument 4
push constant 1
sub
pop argument 4
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function Board.placeComputerShipWithLen 9
push argument 0
pop pointer 0
push constant 0
pop local 8
label WHILE_EXP0
push local 8
not
not
if-goto WHILE_END0
push this 2
push constant 1
sub
call Random.randRange 1
pop local 0
push this 3
push constant 1
sub
call Random.randRange 1
pop local 1
push constant 0
pop local 3
push pointer 0
push this 14
push local 0
push local 1
call Board.getShip 4
push constant 0
eq
push pointer 0
push this 14
push local 0
push local 1
call Board.hasNoNeighbour 4
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 10
call Random.randRange 1
pop local 2
push local 2
push constant 5
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push local 0
push local 1
push constant 1
sub
call Board.getEmptySpaceUp 3
pop local 6
push pointer 0
push local 0
push local 1
push constant 1
add
call Board.getEmptySpaceDown 3
pop local 7
push local 6
push local 7
add
push constant 1
add
pop local 3
goto IF_END1
label IF_FALSE1
push pointer 0
push local 0
push constant 1
add
push local 1
call Board.getEmptySpaceRight 3
pop local 5
push pointer 0
push local 0
push constant 1
sub
push local 1
call Board.getEmptySpaceLeft 3
pop local 4
push local 4
push local 5
add
push constant 1
add
pop local 3
label IF_END1
label IF_FALSE0
push local 3
push argument 1
push constant 1
sub
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
pop local 8
label IF_FALSE2
goto WHILE_EXP0
label WHILE_END0
push local 2
push constant 5
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push pointer 0
push local 0
push local 1
push local 7
push argument 1
call Board.placeComputerShipWithLenVertical 5
pop temp 0
goto IF_END3
label IF_FALSE3
push pointer 0
push local 0
push local 1
push local 5
push argument 1
call Board.placeComputerShipWithLenHorizontal 5
pop temp 0
label IF_END3
push constant 0
return
function Board.placeComputerShips 0
push argument 0
pop pointer 0
push pointer 0
call Board.removeCursor 1
pop temp 0
push pointer 0
push constant 5
call Board.placeComputerShipWithLen 2
pop temp 0
push pointer 0
push constant 4
call Board.placeComputerShipWithLen 2
pop temp 0
push pointer 0
push constant 3
call Board.placeComputerShipWithLen 2
pop temp 0
push pointer 0
push constant 2
call Board.placeComputerShipWithLen 2
pop temp 0
push pointer 0
push constant 2
call Board.placeComputerShipWithLen 2
pop temp 0
push pointer 0
push constant 1
call Board.placeComputerShipWithLen 2
pop temp 0
push pointer 0
push constant 1
call Board.placeComputerShipWithLen 2
pop temp 0
push constant 0
return
function Board.drawMissCell 1
push argument 0
pop pointer 0
push this 0
push this 4
push this 5
call Math.multiply 2
add
push this 4
push constant 4
call Math.multiply 2
push constant 10
call Math.divide 2
add
push this 1
push this 4
push this 6
call Math.multiply 2
add
push this 0
push this 4
push this 5
call Math.multiply 2
add
push this 4
push constant 4
call Math.divide 2
add
push this 1
push this 4
push this 6
call Math.multiply 2
add
push this 4
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 4
push this 5
call Math.multiply 2
add
push this 4
push constant 3
call Math.multiply 2
push constant 4
call Math.divide 2
add
push this 1
push this 4
push this 6
call Math.multiply 2
add
push this 0
push this 4
push this 5
call Math.multiply 2
add
push this 4
push constant 2
call Math.divide 2
add
push this 1
push this 4
push this 6
call Math.multiply 2
add
push this 4
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 4
push this 5
call Math.multiply 2
add
push this 1
push this 4
push this 6
call Math.multiply 2
add
push this 4
push constant 3
call Math.divide 2
add
push this 0
push this 4
push this 5
call Math.multiply 2
add
push this 4
add
push this 1
push this 4
push this 6
call Math.multiply 2
add
push this 4
push constant 3
call Math.divide 2
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 4
push this 5
call Math.multiply 2
add
push this 1
push this 4
push this 6
call Math.multiply 2
add
push this 4
push constant 2
call Math.multiply 2
push constant 3
call Math.divide 2
add
push this 0
push this 4
push this 5
call Math.multiply 2
add
push this 4
add
push this 1
push this 4
push this 6
call Math.multiply 2
add
push this 4
push constant 2
call Math.multiply 2
push constant 3
call Math.divide 2
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Board.drawShipPart 4
push argument 0
pop pointer 0
push this 0
push this 5
push this 4
call Math.multiply 2
add
push this 8
add
pop local 0
push this 1
push this 6
push this 4
call Math.multiply 2
add
push this 8
add
pop local 1
push local 0
push this 10
add
pop local 2
push local 1
push this 10
add
pop local 3
push local 0
push local 1
push local 2
push local 3
call Screen.drawRectangle 4
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push this 10
push constant 2
call Math.divide 2
add
push local 1
push local 0
push this 10
push constant 2
call Math.divide 2
add
push local 3
push this 10
push constant 4
call Math.divide 2
sub
call Screen.drawLine 4
pop temp 0
push local 0
push this 10
push constant 2
call Math.divide 2
add
push local 3
push this 10
push constant 9
call Math.divide 2
sub
call Screen.drawPixel 2
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
return
function Board.drawSinkedShipPart 4
push argument 0
pop pointer 0
push this 0
push argument 1
push this 4
call Math.multiply 2
add
push this 8
add
pop local 0
push this 1
push argument 2
push this 4
call Math.multiply 2
add
push this 8
add
pop local 1
push local 0
push this 10
add
pop local 2
push local 1
push this 10
add
pop local 3
push local 0
push local 1
push local 2
push local 3
call Screen.drawRectangle 4
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push this 10
push constant 2
call Math.multiply 2
push constant 3
call Math.divide 2
add
push local 1
push local 0
push this 10
push constant 3
call Math.divide 2
add
push local 3
call Screen.drawLine 4
pop temp 0
push local 0
push this 10
push constant 3
call Math.divide 2
add
push local 1
push local 0
push this 10
push constant 2
call Math.multiply 2
push constant 3
call Math.divide 2
add
push local 3
call Screen.drawLine 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
return
function Board.drawSinkedShip 2
push argument 0
pop pointer 0
push pointer 0
push this 5
push this 6
call Board.drawSinkedShipPart 3
pop temp 0
push this 5
push constant 1
add
pop local 0
push this 6
pop local 1
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push pointer 0
push this 15
push local 0
push local 1
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push local 0
push local 1
call Board.drawSinkedShipPart 3
pop temp 0
goto IF_END0
label IF_FALSE0
push this 2
pop local 0
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 5
push constant 1
sub
pop local 0
push this 6
pop local 1
label WHILE_EXP1
push local 0
push constant 1
neg
gt
not
if-goto WHILE_END1
push pointer 0
push this 15
push local 0
push local 1
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push local 0
push local 1
call Board.drawSinkedShipPart 3
pop temp 0
goto IF_END1
label IF_FALSE1
push constant 0
pop local 0
label IF_END1
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP1
label WHILE_END1
push this 5
pop local 0
push this 6
push constant 1
add
pop local 1
label WHILE_EXP2
push local 1
push this 3
lt
not
if-goto WHILE_END2
push pointer 0
push this 15
push local 0
push local 1
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push local 0
push local 1
call Board.drawSinkedShipPart 3
pop temp 0
goto IF_END2
label IF_FALSE2
push this 3
pop local 1
label IF_END2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
push this 5
pop local 0
push this 6
push constant 1
sub
pop local 1
label WHILE_EXP3
push local 1
push constant 1
neg
gt
not
if-goto WHILE_END3
push pointer 0
push this 15
push local 0
push local 1
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push pointer 0
push local 0
push local 1
call Board.drawSinkedShipPart 3
pop temp 0
goto IF_END3
label IF_FALSE3
push constant 0
pop local 1
label IF_END3
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP3
label WHILE_END3
push constant 0
return
function Board.markNeighbourNotToVisit 0
push argument 0
pop pointer 0
push pointer 0
push this 15
push argument 1
push constant 0
add
push argument 2
push constant 0
add
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push this 15
push argument 1
push constant 0
add
push argument 2
push constant 0
add
push constant 2
call Board.setShip 5
pop temp 0
label IF_FALSE0
push pointer 0
push this 15
push argument 1
push constant 0
add
push argument 2
push constant 1
add
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push this 15
push argument 1
push constant 0
add
push argument 2
push constant 1
add
push constant 2
call Board.setShip 5
pop temp 0
label IF_FALSE1
push pointer 0
push this 15
push argument 1
push constant 0
add
push argument 2
push constant 1
sub
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push this 15
push argument 1
push constant 0
add
push argument 2
push constant 1
sub
push constant 2
call Board.setShip 5
pop temp 0
label IF_FALSE2
push pointer 0
push this 15
push argument 1
push constant 1
add
push argument 2
push constant 0
add
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push pointer 0
push this 15
push argument 1
push constant 1
add
push argument 2
push constant 0
add
push constant 2
call Board.setShip 5
pop temp 0
label IF_FALSE3
push pointer 0
push this 15
push argument 1
push constant 1
add
push argument 2
push constant 1
add
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push pointer 0
push this 15
push argument 1
push constant 1
add
push argument 2
push constant 1
add
push constant 2
call Board.setShip 5
pop temp 0
label IF_FALSE4
push pointer 0
push this 15
push argument 1
push constant 1
add
push argument 2
push constant 1
sub
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push pointer 0
push this 15
push argument 1
push constant 1
add
push argument 2
push constant 1
sub
push constant 2
call Board.setShip 5
pop temp 0
label IF_FALSE5
push pointer 0
push this 15
push argument 1
push constant 1
sub
push argument 2
push constant 0
add
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push pointer 0
push this 15
push argument 1
push constant 1
sub
push argument 2
push constant 0
add
push constant 2
call Board.setShip 5
pop temp 0
label IF_FALSE6
push pointer 0
push this 15
push argument 1
push constant 1
sub
push argument 2
push constant 1
add
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push pointer 0
push this 15
push argument 1
push constant 1
sub
push argument 2
push constant 1
add
push constant 2
call Board.setShip 5
pop temp 0
label IF_FALSE7
push pointer 0
push this 15
push argument 1
push constant 1
sub
push argument 2
push constant 1
sub
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push pointer 0
push this 15
push argument 1
push constant 1
sub
push argument 2
push constant 1
sub
push constant 2
call Board.setShip 5
pop temp 0
label IF_FALSE8
push constant 0
return
function Board.markNeighboursNotToVisit 2
push argument 0
pop pointer 0
push pointer 0
push this 5
push this 6
call Board.markNeighbourNotToVisit 3
pop temp 0
push this 5
push constant 1
add
pop local 0
push this 6
pop local 1
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push pointer 0
push this 15
push local 0
push local 1
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push local 0
push local 1
call Board.markNeighbourNotToVisit 3
pop temp 0
goto IF_END0
label IF_FALSE0
push this 2
pop local 0
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 5
push constant 1
sub
pop local 0
push this 6
pop local 1
label WHILE_EXP1
push local 0
push constant 1
neg
gt
not
if-goto WHILE_END1
push pointer 0
push this 15
push local 0
push local 1
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push local 0
push local 1
call Board.markNeighbourNotToVisit 3
pop temp 0
goto IF_END1
label IF_FALSE1
push constant 0
pop local 0
label IF_END1
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP1
label WHILE_END1
push this 5
pop local 0
push this 6
push constant 1
add
pop local 1
label WHILE_EXP2
push local 1
push this 3
lt
not
if-goto WHILE_END2
push pointer 0
push this 15
push local 0
push local 1
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push local 0
push local 1
call Board.markNeighbourNotToVisit 3
pop temp 0
goto IF_END2
label IF_FALSE2
push this 3
pop local 1
label IF_END2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
push this 5
pop local 0
push this 6
push constant 1
sub
pop local 1
label WHILE_EXP3
push local 1
push constant 1
neg
gt
not
if-goto WHILE_END3
push pointer 0
push this 15
push local 0
push local 1
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push pointer 0
push local 0
push local 1
call Board.markNeighbourNotToVisit 3
pop temp 0
goto IF_END3
label IF_FALSE3
push constant 0
pop local 1
label IF_END3
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP3
label WHILE_END3
push constant 0
return
function Board.isShipSinked 4
push argument 0
pop pointer 0
push constant 0
pop local 0
push this 5
pop local 1
push this 6
pop local 2
label WHILE_EXP0
push local 0
not
not
if-goto WHILE_END0
push pointer 0
push this 15
push local 1
push local 2
call Board.getShip 4
pop local 3
push local 3
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push this 14
push local 1
push local 2
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
goto IF_END1
label IF_FALSE1
push constant 0
not
pop local 0
label IF_END1
goto IF_END0
label IF_FALSE0
push local 3
push constant 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
pop local 0
label IF_FALSE2
label IF_END0
push local 1
push constant 1
add
pop local 1
push local 1
push this 2
push constant 1
sub
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
not
pop local 0
label IF_FALSE3
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
push this 5
pop local 1
push this 6
pop local 2
label WHILE_EXP1
push local 0
not
not
if-goto WHILE_END1
push pointer 0
push this 15
push local 1
push local 2
call Board.getShip 4
pop local 3
push local 3
push constant 0
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push pointer 0
push this 14
push local 1
push local 2
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
return
goto IF_END5
label IF_FALSE5
push constant 0
not
pop local 0
label IF_END5
goto IF_END4
label IF_FALSE4
push local 3
push constant 2
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
not
pop local 0
label IF_FALSE6
label IF_END4
push local 1
push constant 1
sub
pop local 1
push local 1
push constant 0
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
not
pop local 0
label IF_FALSE7
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 0
push this 5
pop local 1
push this 6
pop local 2
label WHILE_EXP2
push local 0
not
not
if-goto WHILE_END2
push pointer 0
push this 15
push local 1
push local 2
call Board.getShip 4
pop local 3
push local 3
push constant 0
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push pointer 0
push this 14
push local 1
push local 2
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 0
return
goto IF_END9
label IF_FALSE9
push constant 0
not
pop local 0
label IF_END9
goto IF_END8
label IF_FALSE8
push local 3
push constant 2
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 0
not
pop local 0
label IF_FALSE10
label IF_END8
push local 2
push constant 1
add
pop local 2
push local 2
push this 3
push constant 1
sub
gt
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push constant 0
not
pop local 0
label IF_FALSE11
goto WHILE_EXP2
label WHILE_END2
push constant 0
pop local 0
push this 5
pop local 1
push this 6
pop local 2
label WHILE_EXP3
push local 0
not
not
if-goto WHILE_END3
push pointer 0
push this 15
push local 1
push local 2
call Board.getShip 4
pop local 3
push local 3
push constant 0
eq
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push pointer 0
push this 14
push local 1
push local 2
call Board.getShip 4
push constant 1
eq
if-goto IF_TRUE13
goto IF_FALSE13
label IF_TRUE13
push constant 0
return
goto IF_END13
label IF_FALSE13
push constant 0
not
pop local 0
label IF_END13
goto IF_END12
label IF_FALSE12
push local 3
push constant 2
eq
if-goto IF_TRUE14
goto IF_FALSE14
label IF_TRUE14
push constant 0
not
pop local 0
label IF_FALSE14
label IF_END12
push local 2
push constant 1
sub
pop local 2
push local 2
push constant 0
lt
if-goto IF_TRUE15
goto IF_FALSE15
label IF_TRUE15
push constant 0
not
pop local 0
label IF_FALSE15
goto WHILE_EXP3
label WHILE_END3
push constant 0
not
return
function Board.markPlace 0
push argument 0
pop pointer 0
push pointer 0
push this 14
push this 5
push this 6
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call Board.drawMissCell 1
pop temp 0
push pointer 0
push this 15
push this 5
push this 6
push constant 2
call Board.setShip 5
pop temp 0
push constant 0
return
label IF_FALSE0
push pointer 0
push this 15
push this 5
push this 6
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 11
push constant 1
add
pop this 11
push pointer 0
push this 15
push this 5
push this 6
push constant 1
call Board.setShip 5
pop temp 0
label IF_FALSE1
push pointer 0
call Board.isShipSinked 1
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
call Board.drawSinkedShip 1
pop temp 0
goto IF_END2
label IF_FALSE2
push pointer 0
call Board.drawShipPart 1
pop temp 0
label IF_END2
push constant 0
not
return
function Board.getEmptySpacesInSinkedShipsGrid 3
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push this 3
lt
not
if-goto WHILE_END1
push pointer 0
push this 15
push local 1
push local 2
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
label IF_FALSE0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Board.getCoordinatesForEmptyMember 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 3
lt
not
if-goto WHILE_END1
push pointer 0
push this 15
push local 0
push local 1
call Board.getShip 4
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
pop this 5
push local 1
pop this 6
push constant 0
return
goto IF_END1
label IF_FALSE1
push argument 1
push constant 1
sub
pop argument 1
label IF_END1
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.chooseNextCell 2
push argument 0
pop pointer 0
push this 13
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call Board.getEmptySpacesInSinkedShipsGrid 1
pop local 0
push local 0
push constant 1
sub
call Random.randRange 1
pop local 1
push pointer 0
push local 1
call Board.getCoordinatesForEmptyMember 2
pop temp 0
goto IF_END0
label IF_FALSE0
push this 13
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push this 15
push this 5
push this 6
push constant 1
sub
call Board.getShip 4
push constant 2
eq
push this 6
push constant 0
eq
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 13
push constant 1
add
pop this 13
push pointer 0
call Board.chooseNextCell 1
pop temp 0
goto IF_END2
label IF_FALSE2
push this 6
push constant 1
sub
pop this 6
label IF_END2
goto IF_END1
label IF_FALSE1
push this 13
push constant 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push pointer 0
push this 15
push this 5
push constant 1
sub
push this 6
call Board.getShip 4
push constant 2
eq
push this 5
push constant 0
eq
or
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push this 13
push constant 1
add
pop this 13
push pointer 0
call Board.chooseNextCell 1
pop temp 0
goto IF_END4
label IF_FALSE4
push this 5
push constant 1
sub
pop this 5
label IF_END4
goto IF_END3
label IF_FALSE3
push this 13
push constant 2
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push pointer 0
push this 15
push this 5
push this 6
push constant 1
add
call Board.getShip 4
push constant 2
eq
push this 6
push this 3
push constant 1
sub
eq
or
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push this 13
push constant 1
add
pop this 13
push pointer 0
call Board.chooseNextCell 1
pop temp 0
goto IF_END6
label IF_FALSE6
push this 6
push constant 1
add
pop this 6
label WHILE_EXP0
push pointer 0
push this 15
push this 5
push this 6
call Board.getShip 4
push constant 1
eq
not
if-goto WHILE_END0
push this 6
push constant 1
add
pop this 6
goto WHILE_EXP0
label WHILE_END0
label IF_END6
goto IF_END5
label IF_FALSE5
push this 5
push constant 1
add
pop this 5
label WHILE_EXP1
push pointer 0
push this 15
push this 5
push this 6
call Board.getShip 4
push constant 1
eq
not
if-goto WHILE_END1
push this 5
push constant 1
add
pop this 5
goto WHILE_EXP1
label WHILE_END1
label IF_END5
label IF_END3
label IF_END1
label IF_END0
push constant 0
return
function Board.isDirectionAtEdge 0
push argument 0
pop pointer 0
push this 5
push constant 0
eq
push this 13
push constant 3
eq
and
push this 6
push constant 0
eq
push this 13
push constant 1
eq
and
or
return
function Board.sinkShipByComputer 3
push argument 0
pop pointer 0
push constant 800
call Sys.wait 1
pop temp 0
push this 5
pop local 1
push this 6
pop local 2
push pointer 0
call Board.chooseNextCell 1
pop temp 0
push pointer 0
call Board.markPlace 1
pop local 0
push pointer 0
call Board.isAllShipsSinked 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push local 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
call Board.isShipSinked 1
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
call Board.markNeighboursNotToVisit 1
pop temp 0
push constant 0
pop this 13
goto IF_END2
label IF_FALSE2
push this 13
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
pop this 13
label IF_FALSE3
push pointer 0
call Board.isDirectionAtEdge 1
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push this 13
push constant 1
add
pop this 13
label IF_FALSE4
label IF_END2
push pointer 0
call Board.sinkShipByComputer 1
return
goto IF_END1
label IF_FALSE1
push this 13
push constant 0
gt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 1
pop this 5
push local 2
pop this 6
push this 13
push constant 1
add
pop this 13
label IF_FALSE5
push pointer 0
call Board.isDirectionAtEdge 1
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push this 13
push constant 1
add
pop this 13
label IF_FALSE6
push constant 0
return
label IF_END1
function Board.drawCell 0
push argument 0
push argument 1
push argument 0
push argument 2
add
push argument 1
call Screen.drawLine 4
pop temp 0
push argument 0
push argument 1
push argument 0
push argument 1
push argument 3
add
call Screen.drawLine 4
pop temp 0
push argument 0
push argument 1
push argument 3
add
push argument 0
push argument 2
add
push argument 1
push argument 3
add
call Screen.drawLine 4
pop temp 0
push argument 0
push argument 2
add
push argument 1
push argument 0
push argument 2
add
push argument 1
push argument 3
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
