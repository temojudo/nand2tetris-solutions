class MyString {
    function boolean equalsStrings(String str1, String str2) {
      var int     index;
      var int     lengthStr1;
      var int     lengthStr2;
      var char    ch1;
      var char    ch2;
      var boolean res;

      let lengthStr1 = str1.length();
      let lengthStr2 = str2.length();

      if (~(lengthStr1 = lengthStr2)) {
         return false;
      }
      
      let index = 0;
      while (index < lengthStr1) {
         let ch1 = str1.charAt(index);
         let ch2 = str2.charAt(index);

         if (~(ch1 = ch2)) {
            return false;
         }

         let index = index + 1;
      }

      return true;
   }

   function String addStrings(String str1, String str2) {
      var int    index;
      var int    lengthStr1;
      var int    lengthStr2;
      var char   ch;
      var String res;

      let lengthStr1 = str1.length();
      let lengthStr2 = str2.length();

      let res = String.new(lengthStr1 + lengthStr2);

      let index = 0;
      while (index < lengthStr1) {
         let ch = str1.charAt(index);
         let res = res.appendChar(ch);
         let index = index + 1;
      }

      let index = 0;
      while (index < lengthStr2) {
         let ch = str2.charAt(index);
         let res = res.appendChar(ch);
         let index = index + 1;
      }

      return res;
   }

   function boolean isDigit(char ch) {
      if ((ch > 47) & (ch < 58)) { // ch = [0..9]
         return true;
      } else {
         return false;
      }
   }

   function boolean isOperand(char ch) {
      if ((ch = 42) | (ch = 43) | (ch = 45) | (ch = 47)) { // ch = [+, *, -, /]
         return true;
      } else {
         return false;
      }
   }

   function boolean isBrackets(char ch) {
      if ((ch = 40) | (ch = 41)) { // ch = [(, )]
         return true;
      } else {
         return false;
      }
   }
   
   function boolean isValidSymbol(char ch) {
      if ((MyString.isDigit(ch)) | (MyString.isOperand(ch)) | (MyString.isBrackets(ch)) | (ch = 32)) { // ' ' = 32
         return true;
      } else {
         return false;
      }
   }

   function boolean containsDigit(String line) {
      var int  index;
      var int  length;
      var char ch;

      let index  = 0;
      let length = line.length();

      while (index < length) {
         let ch = line.charAt(index);
         if (MyString.isDigit(ch)) {
            return true;
         }
         let index = index + 1;
      }

      return false;
   }

   function boolean containsOnlyValidSymbols(String line) {
      var int  index;
      var int  lineLength;
      var char ch;

      let index      = 0;
      let lineLength = line.length();

      while (index < lineLength) {
         let ch = line.charAt(index);
         if (~MyString.isValidSymbol(ch)) {
            return false;
         }
         let index = index + 1;
      }

      return true;
   }

   function boolean isValidBrackets(String line) {
      var int  index;
      var int  length;
      var int  bracketsComp;
      var char ch;

      let index        = 0;
      let bracketsComp = 0;
      let length       = line.length();

      while (index < length) {
         let ch = line.charAt(index);

         if (ch = 40) { // ch = '('
            let bracketsComp = bracketsComp + 1;
         }

         if (ch = 41) { // ch = ')'
            if (bracketsComp < 1) {
               return false;
            }
            let bracketsComp = bracketsComp - 1;
         }

         let index = index + 1;
      }

      if (bracketsComp = 0) {
         return true;
      } else {
         return false;
      }
   }

   function boolean isValidSequence(String line) {
      var int  index;
      var int  length;
      var char ch;
      var char lastChar;
      var char lastNonEmptyChar;

      let lastChar         = 0;
      let lastNonEmptyChar = 0;
      let index            = 0;
      let length           = line.length();

      while (index < length) {
         let ch = line.charAt(index);

         if (MyString.isOperand(ch)) {
            if ( ((lastNonEmptyChar = 40) & (~(ch = 45))) | (MyString.isOperand(lastNonEmptyChar))) { // '(-' = valid, '+-' = invalid
               return false;
            }

            if ((~(ch = 45)) & (lastNonEmptyChar = 0)) { // '-' = 45
               return false;
            }
         }

         if (MyString.isDigit(ch)) {
            if (lastNonEmptyChar = 41) { // ')' = 41
               return false;
            }

            if ((lastChar = 32) & (MyString.isDigit(lastNonEmptyChar))) { // ' ' = 32
               return false;
            }
         }

         if (ch = 40) { // '(' = 40
            if (MyString.isDigit(lastNonEmptyChar)) {
               return false;
            }

            if (lastNonEmptyChar = 41) { // ')' = 41
               return false;
            }
         }

         if (ch = 41) { // ')' = 41
            if (MyString.isOperand(lastNonEmptyChar)) {
               return false;
            }

            if (lastNonEmptyChar = 40) { // '(' = 40
               return false;
            }
         }

         let lastChar = ch;
         if (~(ch = 32)) { // ' ' = 32
            let lastNonEmptyChar = ch;
         }
         let index = index + 1;
      }

      if (MyString.isOperand(lastNonEmptyChar)) {
         return false;
      } else {
         return true;
      }
   }

   function boolean isValidExpression(String line) {
      if (~MyString.containsDigit(line)) {
         return false;
      }

      if (~MyString.containsOnlyValidSymbols(line)) {
         return false;
      }

      if (~MyString.isValidBrackets(line)) {
         return false;
      }

      if (~MyString.isValidSequence(line)) {
         return false;
      }

      return true;
   }


   function String removeWhitespaces(String line) {
      var int    index;
      var int    length;
      var int    numWhitespaces;
      var char   ch;
      var String res;

      let index          = 0;
      let numWhitespaces = 0;
      let length         = line.length();

      while (index < length) {
         let ch = line.charAt(index);
         if (ch = 32) {
            let numWhitespaces = numWhitespaces + 1;
         }
         let index = index + 1;
      }

      let index = 0;
      let res   = String.new(length - numWhitespaces);

      while (index < length) {
         let ch = line.charAt(index);
         if (~(ch = 32)) {
            let res = res.appendChar(ch);
         }
         let index = index + 1;
      }

      return res;
   }

   function int evaluateOperation(int val1, int val2, char op) {
      if (op = 43) {
         return val1 + val2;
      }

      if (op = 45) {
         return val1 - val2;
      }
      
      if (op = 42) {
         return val1 * val2;
      }
      
      return val1 / val2;
   }

   function int priority(char ch) {
      if ((ch = 43) | (ch = 45)) { // [+, -]
         return 1;
      }

      if ((ch = 42) | (ch = 47)) { // [*, /]
         return 2;
      }

      return 0;
   }

   function boolean isMorePriority(char ch1, char ch2) {
      var int val1;
      var int val2;

      let val1 = MyString.priority(ch1);
      let val2 = MyString.priority(ch2);

      if (val1 > val2) {
         return true;
      } else {
         return false;
      }
   }

   function String evalCorrectLine(String line) {
      var IntStack values;
      var IntStack ops;

      var int index;
      var int length;
      var int val;
      var int val1;
      var int val2;
      var char ch;
      var char op;
      var boolean exit;
      var String  res;

      let values = IntStack.new(64);
      let ops    = IntStack.new(64);

      let index  = 0;
      let length = line.length();

      while (index < length) {
         let ch = line.charAt(index);

         if (ch = 40) { // '(' = 40
            do ops.push(ch);
            if (line.charAt(index + 1) = 45) {
               do values.push(0);
            }
         } else {
            if (MyString.isDigit(ch)) {
               let val  = 0;
               let exit = false;
               
               while (~exit) {
                  if (index > (length - 1)) {
                     let exit = true;
                  } else {
                     let ch = line.charAt(index);
                     if (~MyString.isDigit(ch)) {
                        let exit = true;
                     } else {
                        let val   = (val * 10) + (ch - 48); // '0' = 48
                        let index = index + 1;
                     }
                  }
               }

               do values.push(val);
               let index = index - 1;
            } else {
               if (ch = 41) { // ')' = 41
                  let exit = false;
                  while ((~ops.isEmpty()) & (~exit)) {
                     let op = ops.peek();
                     if (op = 40) { // '(' = 40
                        let exit = true;
                     } else {
                        let val2 = values.peek();
                        do values.pop();

                        let val1 = values.peek();
                        do values.pop();

                        do ops.pop();

                        let val = MyString.evaluateOperation(val1, val2, op);
                        do values.push(val);
                     }
                  }
                  do ops.pop();
               } else {
                  let exit = false;
                  while ((~ops.isEmpty()) & (~exit)) {
                     let op = ops.peek();
                     if (MyString.isMorePriority(ch, op)) {
                        let exit = true;
                     } else {
                        let val2 = values.peek();
                        do values.pop();

                        let val1 = values.peek();
                        do values.pop();

                        do ops.pop();

                        let val = MyString.evaluateOperation(val1, val2, op);
                        do values.push(val);
                     }
                  }
                  do ops.push(ch);
               }
            }
         }

         let index = index + 1;
      }

      while (~ops.isEmpty()) {
         let op = ops.peek();
         do ops.pop();

         let val2 = values.peek();
         do values.pop();

         let val1 = values.peek();
         do values.pop();

         let val = MyString.evaluateOperation(val1, val2, op);
         do values.push(val);
      }

      let res = String.new(64);
      do res.setInt(values.peek());

      do values.dispose();
      do ops.dispose();
      
      return res;
   }

   function String evalLine(String line) {
      var String withoutWhitespace;
      var String res;

      if (~MyString.isValidExpression(line)) {
         return "Invalid expression!";
      }

      let withoutWhitespace = MyString.removeWhitespaces(line);
      let res               = MyString.evalCorrectLine(withoutWhitespace);

      do withoutWhitespace.dispose();
      return res;
   }

}
